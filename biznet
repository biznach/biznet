#!/bin/bash
# ADD -vx after bash to echo expanded script
# or set -x/+x later

# VARIABLES ==========

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[1;36m'
NC='\033[0m'

input="ENTER"
needsreboot='0'

# TEMPLATES ==========

function biztemplate {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'ACTION? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    #ACTION
  ;;
  esac
}

# FUNCTIONS ==========

function pause {
  echo -e "${CYAN}Press [ENTER] to Continue${NC}"
  echo -e "(or [ESC] to return)\n"
  read -N 10000000 -t 0.01
  read -n 1 -s -r input
  case $input in
    $'\e')
      menu
    ;;
  esac
}

function completed {
  echo -e "${CYAN}Press [ENTER] to Continue${NC}"
  read -N 10000000 -t 0.01
  read -n 1 -s -r input
  case $input in
    $'\e')
      menu
    ;;
  esac
}

function inithost {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Configure Host Name? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
    $'\e')
      menu
    ;;
    n|N)
      return
    ;;
    *)
      echo ""
      if [[ ( -s $HOME/.bizconfig ) ]]; then
        printf "Current Host Name: "
        echo -e ${CYAN}$(cat $HOME/.bizconfig)${NC}
      else
          echo -e "biznet" > $HOME/.bizconfig
	        rebootneeded='1'
      fi
      echo ""
      echo -e "(leave empty to skip)"
      read -p "Enter New Host Name: " bizconfig
      if [[ ! ( -z "$bizconfig" ) ]]; then
        echo -e "$bizconfig" > $HOME/.bizconfig
        if [[ ( -s $HOME/.bizconfig ) ]]; then
          echo ""
          printf "Updated Host Name: "
          echo -e "${CYAN}$(cat $HOME/.bizconfig)${NC}"
	        rebootneeded='1'
        fi
      else
        echo ""
        printf "Retained Host Name: "
        echo -e "${CYAN}$(cat $HOME/.bizconfig)${NC}"
      fi
    ;;
  esac
}

function initbizcloud {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Initialize Bizcloud? \e[31m[y/N]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  y|Y)
    echo ""
    if [[ ! ( -s $HOME/bizcloud ) ]]; then
      mkdir $HOME/bizcloud
    fi    
    if [[ ! ( -s /etc/systemd/system/bizcloud.service ) ]]; then
      sudo ln -s /home/$USER/biznet/bizcloud.service /etc/systemd/system/bizcloud.service
    fi
    sudo systemctl start bizcloud.service
    sudo systemctl enable bizcloud.service
    echo "Service Established"
  ;;
  *)
    return
  ;;
  esac
}

function wizinit {
  clear
  echo ""
  echo -e "1) Initialization Wizard"
  echo ""
  inithost
  echo ""
  initbizcloud
  echo ""
  echo -e "Operation Complete..."
  completed
  menu
}

function installupdate {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Install Updates? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    echo ""
    sudo apt-get update
    echo ""
    sudo apt-get upgrade
  ;;
  esac
}

function installfiglet {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Install Figlet? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    echo ""
    sudo apt-get install -y figlet
  ;;
  esac
}

function installrclone {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Install Rclone? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
    $'\e')
      menu
    ;;
    n|N)
      return
    ;;
    *)
      echo ""
      curl https://rclone.org/install.sh | sudo bash
    ;;
  esac
}

function wizinstall {
  clear
  echo ""
  echo -e "2) Installation Wizard"
  echo ""
  installupdate
  echo ""
  installfiglet
  echo ""
  installrclone
  echo ""
  echo -e "Operation Complete..."
  completed
  menu
}

function archivebizdirs {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Archive Online Bizdirs? \e[31m[y/N]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  y|Y)
    bizput -archive
    echo ""
    bizbak -archive
  ;;
  *)
    return
  ;;
  esac
}

function backbizdirs {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Backup Local Bizdirs? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    bizput $HOME/biznet
    echo ""
    bizput $HOME/biznotes
  ;;
  esac
}

function wizback {
  clear
  echo ""
  echo -e "3) Backup Wizard"
  echo ""
  archivebizdirs
  echo ""
  backbizdirs
  echo ""
  echo -e "Operation Complete..."
  completed
  menu
}

function securityreset {
  agentcount=`ps -ax | grep 'ssh-agent' | grep -v grep | wc -l | tr -d '[:space:]'`
  echo "There are $agentcount SSH Agents already Running"
  echo ""
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Kill Existing SSH Agents? \e[31m[y/N]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  y|Y)
    agentcount=`ps -ax | grep 'ssh-agent' | grep -v grep | wc -l | tr -d '[:space:]'`
    echo ""
    echo "Killing All Running SSH Agents"
    echo ""
    echo "Agents Running Before: $agentcount"
    #ps aux | grep 'ssh-agent' | grep -v grep | awk '{print $2'} | xargs kill -9
    ps aux | grep 'ssh-agent' | awk '{print $2'} | xargs kill -9
    agentcount=`ps -ax | grep 'ssh-agent' | grep -v grep | wc -l | tr -d '[:space:]'`
    echo "Agents Running After: $agentcount"
  ;;
  *)
    return
  ;;
  esac
}

function securityagent {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Start SSH Agent? \e[31m[y/N]\e[0m ' input
  echo ""
  case $input in
  $'\e')
    menu
  ;;
  y|Y)
    #agentcount=`ps -ax | grep 'ssh-agent' | grep -v grep | wc -l | tr -d '[:space:]'`
    #echo "There are $agentcount SSH Agents already Running"
    ps -u $(whoami) | grep ssh-agent &> /dev/null
    #ps | grep ssh-agent &> /dev/null
    if [ $? -ne 0 ]; then
      echo ""
      echo "Starting New SSH Agent"
      echo ""
      eval $(ssh-agent -s)
      echo "export SSH_AGENT_PID=$SSH_AGENT_PID" > $HOME/.ssh/ssh-agent
      echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $HOME/.ssh/ssh-agent
      echo ""
      echo "New SSH Authorization Socket:"
      echo $SSH_AUTH_SOCK        
    else
      if [[ -s $HOME/.ssh/ssh-agent ]]; then
        source $HOME/.ssh/ssh-agent
        echo ""
        echo "Sourcing SSH Agent from File"
        echo ""
        echo "Loaded SSH Authorization Socket:"
        echo "$SSH_AUTH_SOCK"      
      else
        echo ""
        echo "Sourcing SSH Agent from File Failed!"
      fi
    fi
    # Kill SSH Agent on Shell Exit
    #trap 'ssh-agent -k; exit' 0
  ;;
  *)
    return
  ;;
  esac
}

function securitykeys {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'Setup SSH Keys? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    agentcount=`ps -ax | grep 'ssh-agent' | grep -v grep | wc -l | tr -d '[:space:]'`
    if [[ ( -n $SSH_AUTH_SOCK ) ]]; then
      echo ""
      echo -e "There are $agentcount SSH Agents Running"
      echo ""
      echo "Current SSH Auth Sock:"
      echo $SSH_AUTH_SOCK      
      echo ""
      ssh-add $HOME/.ssh/bizgit_rsa
      ssh-add $HOME/.ssh/bizgoogle_rsa
    else
      echo ""
      echo "No SSH Agent Running for this Shell"
    fi
  ;;
  esac
}

function wizsecurity {
  clear
  echo ""
  echo -e "4) Security Wizard"
  echo ""
  securityreset
  echo ""
  securityagent  
  echo ""
  securitykeys
  echo ""
  echo -e "Operation Complete..."
  completed
  menu
}

function commandlist {
  read -N 10000000 -t 0.01
  read -n 1 -s -r -p $'List Biznet Commands? \e[32m[Y/n]\e[0m ' input
  echo -e ""
  case $input in
  $'\e')
    menu
  ;;
  n|N)
    return
  ;;
  *)
    echo ""
    ls -1 -F $HOME/biznet | grep '*$'
  ;;
  esac
}

function biznethelp {
  clear
  echo ""
  echo -e "5) Biznet Help"
  echo ""
  commandlist
  echo ""
  echo -e "Operation Complete..."
  completed
  menu
}

function finish {
stty echo
# restore screen
echo -e "\e[?1049l"
read -N 10000000 -t 0.01
if [[ $rebootneeded == 1 ]]; then
  exec bash
fi
exit 0
}

function menu {
clear
if [[ ! -z $( command -v figlet ) ]]; then
  figlet 'BizNet'
else
  echo -e '\nBizNet BizNet BizNet BizNet'
fi
echo -e " ** ${CYAN}BizNet Setup Script${NC} **\n"

echo "1) Initialization Wizard"
echo "2) Installation Wizard"
echo "3) Backup Wizard"
echo "4) Security Wizard"
echo "5) BizNet Help"
echo "X) Exit"
echo ""

selection
}

function selection {
read -N 10000000 -t 0.01
read -n 1 -r -p "Make a Selection: " input
case $input in
  1)
    wizinit
  ;;
  2)
    wizinstall
  ;;
  3)
    wizback
  ;;
  4)
    wizsecurity
  ;;
  5)
    biznethelp
  ;;
  x|X|$'\e')
    finish
  ;;
  *)
    stty -echo
    echo -e "${RED} <Invalid${NC}"
    # Beep
    printf $'\a'
    sleep 0.2
    stty echo
    menu
  ;;
esac
}

# EXECUTE ==========

# save screen
echo -e "\e[?1049h"
# draw menu
menu

# ERROR ==========

# restore screen and exit
echo "ERROR - This should not have happened"
echo -e "\e[?1049l"
read -N 10000000 -t 0.01
#exec bash
exit 1
